import datetime

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, \
    filters, ContextTypes, CallbackContext

from database_helper import Database
from utils import error_handler
from openai_helper import localized_text, OpenAI

class ChatGPTTelegramBot:

    def __init__(self, config: dict, openai: OpenAI):
        self.config = config
        self.openai = openai
        self.allowed_usernames = config['allowed_usernames']
        self.max_requests_per_day = config['max_requests_per_day']
        self.db = Database("users_data.db")


    async def start(self, update: Update, context: CallbackContext) -> None:
        user_id = update.message.from_user.id
        bot_language = self.config['bot_language']
        username = "@" + update.message.from_user.username if update.message.from_user.username else None
        disallowed = (
            localized_text('disallowed', bot_language))
        if username not in self.allowed_usernames:
            await update.message.reply_text(disallowed, disable_web_page_preview=True)
            return

        start_keyboard = [['/start', '/help']]
        reply_markup = ReplyKeyboardMarkup(start_keyboard, one_time_keyboard=True, resize_keyboard=True)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        # await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:', reply_markup=reply_markup)

        user_data = self.db.get_user(user_id)
        if user_data:
            context.user_data[
                'state'] = 'chatting'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'chatting' –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {user_data['name']}! üëã. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —É –ú–∏–∏?", reply_markup=reply_markup)
            return
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        context.user_data['state'] = 'waiting_for_name'
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", reply_markup=reply_markup)


    async def help(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        user_id = update.message.from_user.id
        username = "@" + update.message.from_user.username if update.message.from_user.username else None
        bot_language = self.config['bot_language']
        disallowed = (
            localized_text('disallowed', bot_language))
        if username not in self.allowed_usernames:
            await update.message.reply_text(disallowed, disable_web_page_preview=True)
            return

        help_text = (
            localized_text('help_text', bot_language)[0]
        )
        await update.message.reply_text(help_text, disable_web_page_preview=True)

    async def message_handler(self, update: Update, context: CallbackContext) -> None:
        user_id = update.message.from_user.id

        if self.db.get_message_count_today(user_id) >= self.max_requests_per_day:
            await update.message.reply_text("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.")
            return

        state = context.user_data.get('state', 'start')

        # –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.db.add_message(user_id, 'user', update.message.text)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'messages' not in context.user_data:
            context.user_data['messages'] = self.db.get_message_history(user_id)


        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_message_content = f"–£—á–µ–Ω–∏–∫: {update.message.text}"
        context.user_data['messages'].append({"role": "user", "content": user_message_content})

        if state == 'waiting_for_name':
            context.user_data['name'] = update.message.text
            self.db.add_or_update_user(user_id, name=update.message.text)
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
            context.user_data['state'] = 'waiting_for_age'

        elif state == 'waiting_for_age':
            context.user_data['age'] = update.message.text
            self.db.add_or_update_user(user_id, age=update.message.text)
            await update.message.reply_text(
                f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∏—è üëã \n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω. \n–Ø –ø–æ–ø—Ä–æ–±—É—é –ø–æ–º–æ—á—å üòÉ")
            context.user_data['state'] = 'chatting'


        elif state == 'chatting':

            user_id = update.message.from_user.id
            user_data = self.db.get_user(user_id)
            response = self.openai.get_response(user_data, update.message.text)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —É—á–∏—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            context.user_data['messages'].append({"role": "assistant", "content": response})

            # –ó–∞–ø–∏—Å—å –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db.add_message(user_id, 'assistant', response)

            await update.message.reply_text(response)

    def run(self):
        """
        Runs the bot indefinitely until the user presses Ctrl+C
        """

        application = ApplicationBuilder() \
            .token(self.config['token']) \
            .proxy_url(self.config['proxy']) \
            .get_updates_proxy_url(self.config['proxy']) \
            .concurrent_updates(True) \
            .build()

        application.add_handler(CommandHandler('start', self.start))
        application.add_handler(CommandHandler('help', self.help))
        application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.message_handler))
        application.add_error_handler(error_handler)

        application.run_polling()