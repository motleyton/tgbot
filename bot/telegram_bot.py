from telegram import BotCommandScopeAllGroupChats, Update, constants, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, \
    filters, InlineQueryHandler, CallbackQueryHandler, Application, ContextTypes, CallbackContext, Updater
from utils import error_handler
from openai_helper import localized_text, OpenAI
from telegram import ReplyKeyboardMarkup


class ChatGPTTelegramBot:

    def __init__(self, config: dict, openai: OpenAI):
        self.config = config
        self.openai = openai

    async def start(self, update: Update, context: CallbackContext) -> None:
        context.user_data['state'] = 'waiting_for_name'
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?")


    async def help(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """
        Shows the help menu.
        """
        user_id = update.message.from_user.id

        bot_language = self.config['bot_language']
        help_text = (
                localized_text('help_text', bot_language)[0] +
                '\n\n' +
                f"Personal ID: {user_id}"
        )
        await update.message.reply_text(help_text, disable_web_page_preview=True)

    async def message_handler(self, update: Update, context: CallbackContext) -> None:
        state = context.user_data.get('state', 'start')

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        if 'messages' not in context.user_data:
            context.user_data['messages'] = []

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_message_content = f"–£—á–µ–Ω–∏–∫: {update.message.text}"
        context.user_data['messages'].append({"role": "user", "content": user_message_content})

        if state == 'waiting_for_name':
            context.user_data['name'] = update.message.text
            await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –í–∞–º –ª–µ—Ç?")
            context.user_data['state'] = 'waiting_for_age'

        elif state == 'waiting_for_age':
            context.user_data['age'] = update.message.text
            await update.message.reply_text(f"–û—Ç–ª–∏—á–Ω–æ. –ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –∫–∞–∫–∏–µ-—Ç–æ —É–≤–ª–µ—á–µ–Ω–∏—è?")
            context.user_data['state'] = 'waiting_for_interests'

        elif state == 'waiting_for_interests':
            context.user_data['interests'] = update.message.text
            await update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞—à–∞ üëã \n–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ —Å–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Å–≤–æ–∏–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω. \n–Ø –ø–æ–ø—Ä–æ–±—É—é –ø–æ–º–æ—á—å üòÉ")
            context.user_data['state'] = 'chatting'

        elif state == 'chatting':

            response = self.openai.get_response(context.user_data['messages'])

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —É—á–∏—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é

            context.user_data['messages'].append({"role": "assistant", "content": response})

            await update.message.reply_text(response)

    def run(self):
        """
        Runs the bot indefinitely until the user presses Ctrl+C
        """

        application = ApplicationBuilder() \
            .token(self.config['token']) \
            .proxy_url(self.config['proxy']) \
            .get_updates_proxy_url(self.config['proxy']) \
            .concurrent_updates(True) \
            .build()

        application.add_handler(CommandHandler('start', self.start))
        application.add_handler(CommandHandler('help', self.help))
        application.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), self.message_handler))
        application.add_error_handler(error_handler)

        application.run_polling()
